class Program
{
    static void Main()
    {
        Console.Write("Введите натуральное число: ");
        int number = int.Parse(Console.ReadLine());

        if (IsNonDecreasingSequence(number))
        {
            Console.WriteLine("Последовательность цифр упорядочена не по убыванию.");
        }
        else
        {
            Console.WriteLine("Последовательность цифр упорядочена по убыванию.");
        }
    }

    static bool IsNonDecreasingSequence(int num)
    {
        int prevDigit = 9; // начальное значение для сравнения

        while (num > 0)
        {
            int currentDigit = num % 10;
            if (currentDigit > prevDigit)
            {
                return false;
            }

            prevDigit = currentDigit;
            num /= 10;
        }

        return true;
    }
}

Эта программа написана на C# и предназначена для проверки, упорядочены ли цифры введенного натурального числа не по убыванию (то есть каждая следующая цифра не меньше предыдущей, если смотреть справа налево).

Класс Program содержит два метода:

Main - точка входа в программу.
IsNonDecreasingSequence - вспомогательный метод для определения упорядоченности цифр в числе.
Разберем код по шагам:
Метод Main:
Выводится сообщение в консоль, приглашающее пользователя ввести натуральное число.
Считывается строка из консоли, введенная пользователем, и преобразуется в целое число с помощью int.Parse.
Программа вызывает метод IsNonDecreasingSequence, передавая считанное число в качестве параметра.
Если метод возвращает true, выводится сообщение, что последовательность цифр упорядочена не по убыванию.
Если метод возвращает false, выводится сообщение, что последовательность цифр упорядочена по убыванию.
Метод IsNonDecreasingSequence:
Этот метод принимает целое число (num) и возвращает булевое значение, указывающее, упорядочены ли его цифры не по убыванию.

Метод начинается с инициализации переменной prevDigit значением 9, так как в десятичной системе нет цифры больше, и это будет начальное значение для сравнения.
Затем начинается цикл, который будет работать до тех пор, пока в числе есть цифры (то есть num больше 0).
На каждом шаге цикла программа вычисляет последнюю цифру числа, используя операцию взятия остатка от деления на 10 (num % 10).
Эта цифра (currentDigit) сравнивается с prevDigit. Если currentDigit больше prevDigit, это означает, что последовательность не упорядочена не по убыванию, и метод возвращает false.
Если текущая цифра меньше или равна предыдущей, prevDigit обновляется до значение currentDigit, а число num делится нацело на 10 (num /= 10) для перехода к следующей цифре числа.
Если цикл завершил работу без возврата false, это означает, что ни одна цифра не была больше предшествующей ей, следовательно, метод возвращает true.
Программа будет корректно работать для положительных целых чисел и в случае, если число начинается с нуля (например, 005432), оно будет обработано как 5432, так как ведущие нули не влияют на число в целочисленных переменных.